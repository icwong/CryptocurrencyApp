__d(function (global, require, module, exports, _dependencyMap) {
  var base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var validJSONStartRegex = /^[ \n\r\t]*[{\[]/;

  var arrayBufferToBase64 = function arrayBufferToBase64(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer);
    var len = bytes.length;
    var base64 = '';

    for (var i = 0; i < len; i += 3) {
      base64 += base64Chars[bytes[i] >> 2];
      base64 += base64Chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
      base64 += base64Chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
      base64 += base64Chars[bytes[i + 2] & 63];
    }

    if (len % 3 === 2) {
      base64 = base64.substring(0, base64.length - 1) + '=';
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + '==';
    }

    return base64;
  };

  var binaryToBase64Replacer = function binaryToBase64Replacer(key, value) {
    if (global.ArrayBuffer && value instanceof global.ArrayBuffer) {
      return {
        base64: true,
        data: arrayBufferToBase64(value)
      };
    } else if (global.Buffer) {
      if (value instanceof global.Buffer) {
        return {
          base64: true,
          data: value.toString('base64')
        };
      }

      if (value && value.type === 'Buffer' && Array.isArray(value.data)) {
        var rehydratedBuffer;

        if (global.Buffer.from) {
          rehydratedBuffer = global.Buffer.from(value.data);
        } else {
          rehydratedBuffer = new global.Buffer(value.data);
        }

        return {
          base64: true,
          data: rehydratedBuffer.toString('base64')
        };
      }
    }

    return value;
  };

  module.exports.decode = function (input) {
    if (input == null) {
      return null;
    }

    if (input === '#1' || input === '#2') {
      return input;
    }

    var message = input.toString();

    if (!validJSONStartRegex.test(message)) {
      return message;
    }

    try {
      return JSON.parse(message);
    } catch (err) {}

    return message;
  };

  module.exports.encode = function (object) {
    if (object === '#1' || object === '#2') {
      return object;
    }

    return JSON.stringify(object, binaryToBase64Replacer);
  };
});