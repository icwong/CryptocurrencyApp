__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/Users/ivanwong/Google Drive/School/2018 SPRING/CMPT 470/Project/react-native-redux-crypto-tracker/src/components/CryptoContainer.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactRedux = require(_dependencyMap[2], "react-redux");

    var _reactNative = require(_dependencyMap[3], "react-native");

    var _reactNativeLoadingSpinnerOverlay = require(_dependencyMap[4], "react-native-loading-spinner-overlay");

    var _reactNativeLoadingSpinnerOverlay2 = _interopRequireDefault(_reactNativeLoadingSpinnerOverlay);

    var _FetchCoinData = require(_dependencyMap[5], "./../Actions/FetchCoinData");

    var _FetchCoinData2 = _interopRequireDefault(_FetchCoinData);

    var _CoinCard = require(_dependencyMap[6], "./CoinCard");

    var _CoinCard2 = _interopRequireDefault(_CoinCard);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        CryptoContainer: {
            displayName: "CryptoContainer"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/ivanwong/Google Drive/School/2018 SPRING/CMPT 470/Project/react-native-redux-crypto-tracker/src/components/CryptoContainer.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var CryptoContainer = _wrapComponent("CryptoContainer")(function (_Component) {
        _inherits(CryptoContainer, _Component);

        function CryptoContainer() {
            _classCallCheck(this, CryptoContainer);

            return _possibleConstructorReturn(this, (CryptoContainer.__proto__ || Object.getPrototypeOf(CryptoContainer)).apply(this, arguments));
        }

        _createClass(CryptoContainer, [{
            key: "componentWillMount",
            value: function componentWillMount() {
                this.props.FetchCoinData();
            }
        }, {
            key: "renderCoinCards",
            value: function renderCoinCards() {
                var crypto = this.props.crypto;
                return crypto.data.map(function (coin) {
                    return _react3.default.createElement(_CoinCard2.default, {
                        key: coin.name,
                        coin_name: coin.name,
                        symbol: coin.symbol,
                        price_usd: coin.price_usd,
                        percent_change_24h: coin.percent_change_24h,
                        percent_change_7d: coin.percent_change_7d,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 18
                        }
                    });
                });
            }
        }, {
            key: "render",
            value: function render() {
                var crypto = this.props.crypto;
                var contentContainer = styles.contentContainer;

                if (crypto.isFetching) {
                    return _react3.default.createElement(
                        _reactNative.View,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 37
                            }
                        },
                        _react3.default.createElement(_reactNativeLoadingSpinnerOverlay2.default, {
                            visible: crypto.isFetching,
                            textContent: "Loading...",
                            textStyle: {
                                color: '#253145'
                            },
                            animation: "fade",
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 38
                            }
                        })
                    );
                }

                return _react3.default.createElement(
                    _reactNative.ScrollView,
                    {
                        contentContainerStyle: contentContainer,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 49
                        }
                    },
                    this.renderCoinCards()
                );
            }
        }]);

        return CryptoContainer;
    }(_react2.Component));

    var styles = {
        contentContainer: {
            paddingBottom: 100,
            paddingTop: 55
        }
    };

    function mapStateToProps(state) {
        return {
            crypto: state.crypto
        };
    }

    exports.default = (0, _reactRedux.connect)(mapStateToProps, {
        FetchCoinData: _FetchCoinData2.default
    })(CryptoContainer);
});