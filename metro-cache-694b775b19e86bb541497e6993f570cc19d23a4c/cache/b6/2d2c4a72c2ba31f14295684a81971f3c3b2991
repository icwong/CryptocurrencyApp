__d(function (global, require, module, exports, _dependencyMap) {
  var SetCache = require(_dependencyMap[0], './_SetCache'),
      arrayIncludes = require(_dependencyMap[1], './_arrayIncludes'),
      arrayIncludesWith = require(_dependencyMap[2], './_arrayIncludesWith'),
      cacheHas = require(_dependencyMap[3], './_cacheHas'),
      createSet = require(_dependencyMap[4], './_createSet'),
      setToArray = require(_dependencyMap[5], './_setToArray');

  var LARGE_ARRAY_SIZE = 200;

  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);

      if (set) {
        return setToArray(set);
      }

      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var seenIndex = seen.length;

        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }

        if (iteratee) {
          seen.push(computed);
        }

        result.push(value);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }

        result.push(value);
      }
    }

    return result;
  }

  module.exports = baseUniq;
});