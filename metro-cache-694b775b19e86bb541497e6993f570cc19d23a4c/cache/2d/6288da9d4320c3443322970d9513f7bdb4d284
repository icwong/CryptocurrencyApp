__d(function (global, require, module, exports, _dependencyMap) {
  var baseFor = require(_dependencyMap[0], "lodash._basefor"),
      isArguments = require(_dependencyMap[1], "lodash.isarguments"),
      keysIn = require(_dependencyMap[2], "lodash.keysin");

  var objectTag = '[object Object]';

  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objToString = objectProto.toString;

  function baseForIn(object, iteratee) {
    return baseFor(object, iteratee, keysIn);
  }

  function isPlainObject(value) {
    var Ctor;

    if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) || !hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor))) {
      return false;
    }

    var result;
    baseForIn(value, function (subValue, key) {
      result = key;
    });
    return result === undefined || hasOwnProperty.call(value, result);
  }

  module.exports = isPlainObject;
});